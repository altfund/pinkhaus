# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: beige_book/transcription.proto, beige_book/requests.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List

import betterproto


class InputConfigInputType(betterproto.Enum):
    INPUT_TYPE_UNSPECIFIED = 0
    INPUT_TYPE_FILE = 1
    INPUT_TYPE_FEED = 2


class FeedOptionsOrder(betterproto.Enum):
    ORDER_UNSPECIFIED = 0
    ORDER_NEWEST = 1
    ORDER_OLDEST = 2


class ProcessingConfigModel(betterproto.Enum):
    MODEL_UNSPECIFIED = 0
    MODEL_TINY = 1
    MODEL_BASE = 2
    MODEL_SMALL = 3
    MODEL_MEDIUM = 4
    MODEL_LARGE = 5


class OutputConfigFormat(betterproto.Enum):
    FORMAT_UNSPECIFIED = 0
    FORMAT_TEXT = 1
    FORMAT_JSON = 2
    FORMAT_TABLE = 3
    FORMAT_CSV = 4
    FORMAT_TOML = 5
    FORMAT_SQLITE = 6


@dataclass
class Segment(betterproto.Message):
    """Segment represents a time-bounded portion of transcribed text"""

    start_ms: int = betterproto.int64_field(1)
    end_ms: int = betterproto.int64_field(2)
    text: str = betterproto.string_field(3)


@dataclass
class TranscriptionResult(betterproto.Message):
    """
    TranscriptionResult represents a complete transcription with metadata
    """

    filename: str = betterproto.string_field(1)
    file_hash: str = betterproto.string_field(2)
    language: str = betterproto.string_field(3)
    segments: List["Segment"] = betterproto.message_field(4)
    full_text: str = betterproto.string_field(5)
    created_at: int = betterproto.int64_field(6)
    has_speaker_labels: bool = betterproto.bool_field(7)
    num_speakers: int = betterproto.int64_field(8)


@dataclass
class FeedMetadata(betterproto.Message):
    """FeedMetadata for RSS feed items (optional)"""

    feed_url: str = betterproto.string_field(1)
    item_id: str = betterproto.string_field(2)
    title: str = betterproto.string_field(3)
    audio_url: str = betterproto.string_field(4)
    published: str = betterproto.string_field(5)


@dataclass
class ExtendedTranscriptionResult(betterproto.Message):
    """Extended result with optional feed metadata"""

    transcription: "TranscriptionResult" = betterproto.message_field(1)
    feed_metadata: "FeedMetadata" = betterproto.message_field(2)


@dataclass
class InputConfig(betterproto.Message):
    """Input Configuration"""

    type: "InputConfigInputType" = betterproto.enum_field(1)
    source: str = betterproto.string_field(2)


@dataclass
class FeedOptions(betterproto.Message):
    """Feed processing options"""

    limit: int = betterproto.int32_field(1)
    order: "FeedOptionsOrder" = betterproto.enum_field(2)
    max_retries: int = betterproto.int32_field(3)
    initial_delay: float = betterproto.float_field(4)
    date_threshold: str = betterproto.string_field(5)
    round_robin: bool = betterproto.bool_field(6)


@dataclass
class ProcessingConfig(betterproto.Message):
    """Processing Configuration"""

    model: "ProcessingConfigModel" = betterproto.enum_field(1)
    verbose: bool = betterproto.bool_field(2)
    feed_options: "FeedOptions" = betterproto.message_field(3)


@dataclass
class DatabaseConfig(betterproto.Message):
    """Database Configuration"""

    db_path: str = betterproto.string_field(1)
    metadata_table: str = betterproto.string_field(2)
    segments_table: str = betterproto.string_field(3)


@dataclass
class OutputConfig(betterproto.Message):
    """Output Configuration"""

    format: "OutputConfigFormat" = betterproto.enum_field(1)
    destination: str = betterproto.string_field(2)
    database: "DatabaseConfig" = betterproto.message_field(3)


@dataclass
class TranscriptionRequest(betterproto.Message):
    """Main Request Object"""

    input: "InputConfig" = betterproto.message_field(1)
    processing: "ProcessingConfig" = betterproto.message_field(2)
    output: "OutputConfig" = betterproto.message_field(3)


@dataclass
class ProcessingError(betterproto.Message):
    """Error information"""

    source: str = betterproto.string_field(1)
    error_type: str = betterproto.string_field(2)
    message: str = betterproto.string_field(3)
    timestamp: datetime = betterproto.message_field(4)


@dataclass
class ProcessingSummary(betterproto.Message):
    """Summary statistics"""

    total_items: int = betterproto.int32_field(1)
    processed: int = betterproto.int32_field(2)
    skipped: int = betterproto.int32_field(3)
    failed: int = betterproto.int32_field(4)
    elapsed_time: float = betterproto.float_field(5)


@dataclass
class TranscriptionResponse(betterproto.Message):
    """Response object"""

    success: bool = betterproto.bool_field(1)
    results: List["TranscriptionResult"] = betterproto.message_field(2)
    errors: List["ProcessingError"] = betterproto.message_field(3)
    summary: "ProcessingSummary" = betterproto.message_field(4)
